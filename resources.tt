<# // Code by Sondre Bjellås #>
<#@ template hostspecific="True" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.IO" #>
<#@ include file="manager.ttinclude" #>
<#@ output extension=".js"#>
<#
	// Change these if you don't use standard filename and location for .resx files.
	var resourceName = "Resources";
	var resourceDirectory = Path.GetDirectoryName(Host.TemplateFile) + "\\..\\Properties\\";
	
	var outputName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
	List<string> filesToGenerate = new List<string>();

	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader(); #>
// Code generated by a template
var <#=resourceName #> = {};
<#
	manager.EndBlock();

	var files = System.IO.Directory.GetFiles(resourceDirectory, resourceName + "*.resx");

	foreach(var file in files)
	{
		var name = Path.GetFileNameWithoutExtension(file).Replace(resourceName, "");
		ResXResourceSet resxSet = new ResXResourceSet(file);
		
		// If this is not default, we'll render output to separate file.
		if (!string.IsNullOrEmpty(name))
		{
			manager.StartNewFile(outputName + name + ".js");
		}

foreach (DictionaryEntry item in resxSet) { #>
<#=resourceName#>.<#=item.Key.ToString()#> = '<#= ("" + item.Value).Replace("\r\n", string.Empty).Replace("'","\\'")#>';
<# }

		if (!string.IsNullOrEmpty(name))
		{
			manager.EndBlock();
		}
	}

	manager.Process(true);
#>